---
import Page from "@layouts/Page.astro";
import { S3Client, ListObjectsV2Command } from "@aws-sdk/client-s3";

let photos: string[] = [];
let error: string | null = null;

const getVariable = (name: string) => import.meta.env.DEV
    ? import.meta.env[name]
    : Astro.locals.runtime?.env?.[name];

try {
    const client = new S3Client({
        region: "auto",
        endpoint: getVariable("R2_ENDPOINT"),
        credentials: {
            accessKeyId: getVariable("R2_ACCESS_KEY_ID"),
            secretAccessKey: getVariable("R2_ACCESS_SECRET_KEY")
        }
    });

    const response = await client.send(new ListObjectsV2Command({
        Bucket: getVariable("R2_BUCKET")
    }));

    if (response.Contents) {
        photos = response.Contents
            .filter((obj: any) => obj.Key?.match(/\.(jpg|jpeg|png|gif|webp)$/i))
            .filter((obj: any) => !obj.Key?.startsWith("preview_"))
            .map((obj: any) => obj.Key!)
            .sort();
    }
} catch (err) {
    error = "Failed to load photos!";
}
---
<Page title="photos" path="~/photos">
    <div id="photos">
        {error ? (
            <span class="error">{error}</span>
        ) : photos.length === 0 ? (
            <span class="error">No photos found.</span>
        ) : (
            <div class="photo-grid">
                {photos.map(photo => {
                    const slug = photo.replace(/\.[^/.]+$/, "");
                    const previewUrl = `https://photos.mudkip.dev/preview_${photo}`;
                    return (
                        <a href={`/photos/${slug}`} class="photo">
                            <img src={previewUrl} loading="lazy" />
                        </a>
                    );
                })}
            </div>
        )}
    </div>
</Page>

<style>
    #photos {
        width: 100%;
        max-width: none;
    }

    .photo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 6px;
        grid-auto-rows: max-content;
    }

    .photo {
        cursor: pointer;
        background: var(--surface-3);
        overflow: hidden;
        text-decoration: none;
        display: block;
    }

    .photo img {
        width: 100%;
        height: auto;
        display: block;
        transition: transform 0.3s ease;
    }

    @media (max-width: 768px) {
        .photo-grid {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 4px;
        }
    }
</style>
